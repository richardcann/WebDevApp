// <auto-generated />
using System;
using Housing.WebAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Housing.Migrations
{
    [DbContext(typeof(HousingContext))]
    [Migration("20181125052158_Release1")]
    partial class Release1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview3-35497")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Housing.WebAPI.Models.AppUser", b =>
                {
                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PassHash");

                    b.Property<byte[]>("PassSalt");

                    b.Property<int>("Role");

                    b.HasKey("Username");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Username = "bb",
                            Email = "bob@barker.com",
                            FirstName = "bob",
                            LastName = "barker",
                            PassHash = new byte[] { 86, 52, 101, 110, 84, 99, 83, 102, 114, 68, 78, 114, 110, 74, 65, 52, 74, 73, 66, 109, 90, 69, 89, 90, 82, 99, 99, 67, 105, 88, 120, 83, 71, 104, 97, 80, 78, 90, 56, 109, 75, 101, 103, 61 },
                            PassSalt = new byte[] { 170, 226, 88, 55, 3, 10, 240, 92, 41, 41, 120, 243, 49, 222, 110, 181 },
                            Role = 1
                        },
                        new
                        {
                            Username = "rb",
                            Email = "rob@barker.com",
                            FirstName = "rob",
                            LastName = "barker",
                            PassHash = new byte[] { 100, 49, 87, 52, 73, 75, 117, 102, 114, 87, 48, 51, 80, 113, 66, 85, 43, 81, 115, 56, 73, 116, 107, 113, 85, 53, 108, 99, 82, 99, 106, 84, 66, 120, 52, 117, 121, 83, 68, 78, 90, 52, 89, 61 },
                            PassSalt = new byte[] { 220, 11, 92, 219, 13, 121, 119, 37, 204, 189, 166, 18, 64, 216, 146, 0 },
                            Role = 1
                        },
                        new
                        {
                            Username = "jennaj",
                            Email = "jenna@accomodationservices.soton.ac.uk",
                            FirstName = "jenna",
                            LastName = "jenkins",
                            PassHash = new byte[] { 73, 116, 53, 112, 57, 119, 98, 86, 98, 54, 65, 102, 73, 90, 115, 107, 100, 110, 53, 98, 87, 101, 97, 66, 105, 97, 120, 57, 71, 75, 114, 83, 106, 49, 53, 115, 119, 48, 102, 66, 48, 83, 77, 61 },
                            PassSalt = new byte[] { 83, 62, 209, 222, 65, 42, 68, 22, 67, 179, 195, 6, 86, 173, 17, 83 },
                            Role = 0
                        },
                        new
                        {
                            Username = "james1",
                            Email = "jj18g12@soton.ac.uk",
                            FirstName = "james",
                            LastName = "jones",
                            PassHash = new byte[] { 118, 73, 98, 118, 80, 112, 107, 111, 112, 73, 89, 98, 52, 121, 97, 110, 71, 114, 76, 55, 86, 114, 69, 70, 50, 84, 49, 104, 101, 117, 118, 73, 121, 56, 120, 47, 90, 65, 100, 84, 105, 76, 111, 61 },
                            PassSalt = new byte[] { 87, 249, 212, 34, 178, 242, 73, 89, 190, 134, 198, 45, 104, 247, 147, 172 },
                            Role = 2
                        },
                        new
                        {
                            Username = "lucy34",
                            Email = "ls1@solent.ac.uk",
                            FirstName = "lucy",
                            LastName = "smith",
                            PassHash = new byte[] { 117, 88, 75, 84, 66, 90, 108, 69, 71, 66, 85, 86, 74, 86, 111, 107, 104, 111, 68, 81, 81, 73, 72, 85, 55, 99, 109, 102, 68, 83, 79, 99, 119, 112, 49, 56, 83, 66, 87, 65, 106, 73, 119, 61 },
                            PassSalt = new byte[] { 78, 58, 118, 152, 181, 95, 9, 193, 58, 232, 249, 10, 221, 233, 18, 205 },
                            Role = 2
                        },
                        new
                        {
                            Username = "sarah-X",
                            Email = "sx9g17@soton.ac.uk",
                            FirstName = "sarah",
                            LastName = "xavier",
                            PassHash = new byte[] { 117, 80, 121, 117, 108, 55, 85, 103, 84, 99, 98, 68, 67, 55, 106, 106, 98, 83, 105, 86, 73, 117, 113, 70, 50, 90, 84, 97, 111, 67, 113, 111, 74, 108, 84, 84, 75, 105, 55, 57, 76, 79, 89, 61 },
                            PassSalt = new byte[] { 3, 41, 221, 8, 163, 31, 47, 119, 131, 156, 1, 36, 73, 117, 21, 179 },
                            Role = 2
                        },
                        new
                        {
                            Username = "alexthefantastic",
                            Email = "ad12g17@ecs.soton.ac.uk",
                            FirstName = "alexander",
                            LastName = "davies",
                            PassHash = new byte[] { 103, 113, 97, 74, 116, 69, 65, 117, 110, 88, 75, 109, 117, 88, 66, 71, 80, 104, 81, 122, 43, 73, 110, 67, 51, 121, 102, 69, 112, 55, 87, 88, 99, 74, 113, 105, 48, 67, 85, 98, 65, 101, 85, 61 },
                            PassSalt = new byte[] { 124, 12, 164, 118, 20, 110, 205, 123, 64, 63, 142, 56, 140, 40, 208, 181 },
                            Role = 2
                        },
                        new
                        {
                            Username = "jo92",
                            Email = "js4@solent.ac.uk",
                            FirstName = "jo",
                            LastName = "strong",
                            PassHash = new byte[] { 85, 72, 65, 50, 110, 118, 100, 84, 69, 90, 117, 83, 107, 55, 111, 68, 76, 119, 109, 113, 76, 71, 55, 75, 84, 49, 97, 100, 120, 105, 109, 43, 118, 53, 97, 106, 97, 72, 105, 116, 114, 114, 69, 61 },
                            PassSalt = new byte[] { 33, 190, 184, 105, 243, 213, 124, 181, 10, 5, 221, 74, 56, 130, 26, 203 },
                            Role = 2
                        });
                });

            modelBuilder.Entity("Housing.WebAPI.Models.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path");

                    b.Property<int>("Position");

                    b.Property<int>("PropertyRef");

                    b.HasKey("ID");

                    b.HasIndex("PropertyRef");

                    b.ToTable("Image");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Path = "1aa7f469-72fb-4f9b-9861-cd5445dd3486.jpeg",
                            Position = 1,
                            PropertyRef = 101
                        },
                        new
                        {
                            ID = 2,
                            Path = "2a757997-283f-4e32-95af-71460a81c87f.jpeg",
                            Position = 2,
                            PropertyRef = 101
                        },
                        new
                        {
                            ID = 3,
                            Path = "2db635bf-6d9f-45db-8da9-837f2cea0db8.jpeg",
                            Position = 3,
                            PropertyRef = 101
                        },
                        new
                        {
                            ID = 4,
                            Path = "1ea369fe-8059-44f6-8b48-b17211d8d26b.jpeg",
                            Position = 1,
                            PropertyRef = 102
                        },
                        new
                        {
                            ID = 5,
                            Path = "3aa72703-a50a-40c0-9871-a85cb78837c8.jpeg",
                            Position = 2,
                            PropertyRef = 102
                        });
                });

            modelBuilder.Entity("Housing.WebAPI.Models.Property", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("AppUserRef");

                    b.Property<string>("City");

                    b.Property<string>("County");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Postcode");

                    b.Property<string>("PropertyDescription");

                    b.Property<int>("PropertyStatus");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.HasIndex("AppUserRef");

                    b.ToTable("Property");

                    b.HasData(
                        new
                        {
                            ID = 100,
                            AddressLine1 = "39 University Road",
                            AddressLine2 = "",
                            AppUserRef = "rb",
                            City = "Southampton",
                            County = "Hampshire",
                            Latitude = 50.933448599999998,
                            Longitude = -1.3978988999999999,
                            Postcode = "SO146UP",
                            PropertyDescription = "2 Toilets!",
                            PropertyStatus = 2,
                            Timestamp = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 101,
                            AddressLine1 = "30 Alma Road",
                            AddressLine2 = "",
                            AppUserRef = "bb",
                            City = "Southampton",
                            County = "Hampshire",
                            Latitude = 50.922176499999999,
                            Longitude = -1.3997237,
                            Postcode = "SO146UP",
                            PropertyDescription = "Very nice brickwork",
                            PropertyStatus = 0,
                            Timestamp = new DateTime(2018, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 102,
                            AddressLine1 = "22 Portswood Road",
                            AddressLine2 = "Portswood",
                            AppUserRef = "bb",
                            City = "Southampton",
                            County = "Hampshire",
                            Latitude = 50.921070100000001,
                            Longitude = -1.3976039,
                            Postcode = "SO172ET",
                            PropertyDescription = "It has a roof",
                            PropertyStatus = 1,
                            Timestamp = new DateTime(2018, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ID = 103,
                            AddressLine1 = "31 Alma Road",
                            AddressLine2 = "",
                            AppUserRef = "bb",
                            City = "Southampton",
                            County = "Hampshire",
                            Latitude = 50.921907400000002,
                            Longitude = -1.4000154,
                            Postcode = "SO146UP",
                            PropertyDescription = "Very very nice brickwork",
                            PropertyStatus = 0,
                            Timestamp = new DateTime(2018, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Housing.WebAPI.Models.Rejection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("PropertyRef");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.HasIndex("PropertyRef");

                    b.ToTable("Rejection");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Please add at least one photo",
                            PropertyRef = 100,
                            Timestamp = new DateTime(2018, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Housing.WebAPI.Models.Image", b =>
                {
                    b.HasOne("Housing.WebAPI.Models.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Housing.WebAPI.Models.Property", b =>
                {
                    b.HasOne("Housing.WebAPI.Models.AppUser", "AppUser")
                        .WithMany("Properties")
                        .HasForeignKey("AppUserRef");
                });

            modelBuilder.Entity("Housing.WebAPI.Models.Rejection", b =>
                {
                    b.HasOne("Housing.WebAPI.Models.Property", "Property")
                        .WithMany("Rejections")
                        .HasForeignKey("PropertyRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
